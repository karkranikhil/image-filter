{"version":3,"sources":["logo.svg","style.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Container","styled","div","_templateObject","Image","img","_templateObject2","props","concat","blur","greyscale","brightness","contrast","hue","opacity","saturate","sepia","INITIAL","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeValue","event","setState","defineProperty","target","name","value","readURL","input","files","reader","FileReader","onload","e","objectSpread","url","result","readAsDataURL","state","_this2","react_default","a","createElement","Fragment","className","htmlFor","type","onChange","id","src","alt","App_Slider","min","max","callback","step","Component","Slider","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8219c3d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import styled from 'styled-components'\n\nexport const Container = styled.div`\n    display:flex;\n    padding:15px;\n    flex-wrap: wrap;\n    &img:hover{\n        filter: none;\n    }\n    .width100{\n        width:100%;\n    }\n    .slidecontainer {\n        display:flex;\n        padding:15px;\n      }\n      \n      .slider {\n        -webkit-appearance: none;\n        width: 100%;\n        height: 15px;\n        border-radius: 5px;\n        background: #d3d3d3;\n        outline: none;\n        opacity: 0.7;\n        -webkit-transition: .2s;\n        transition: opacity .2s;\n      }\n      \n      .slider:hover {\n        opacity: 1;\n      }\n      \n      .slider::-webkit-slider-thumb {\n        -webkit-appearance: none;\n        appearance: none;\n        width: 25px;\n        height: 25px;\n        border-radius: 50%;\n        background: #2195f3;\n        cursor: pointer;\n      }\n      \n      .slider::-moz-range-thumb {\n        width: 25px;\n        height: 25px;\n        border-radius: 50%;\n        background: #2195f3;\n        cursor: pointer;\n      }\n`\nexport const Image  = styled.img`\n filter:${props => `blur(${props.blur}px) grayscale(${props.greyscale}) brightness(${props.brightness}) contrast(${props.contrast}) hue-rotate(${props.hue}deg) opacity(${props.opacity}) saturate(${props.saturate}) sepia(${props.sepia})`}\n`\n","import React, { Component } from 'react';\nimport logo from './logo.svg'\nimport './App.css';\nimport {Container, Image} from './style.js'\nconst INITIAL={\n  blur:'0',\n  greyscale:'0',\n  brightness:'1',\n  contrast:'1',\n  hue:'0',\n  saturate:'1',\n  opacity:'1',\n  sepia:'0',\n}\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n     ...INITIAL,\n      url: 'https://d27k8xmh3cuzik.cloudfront.net/wp-content/uploads/2018/03/acj-2003-beautiful-landscapes-around-the-world-4.jpg'\n    };\n  }\n  changeValue= (event)=>{\n    this.setState({\n      [event.target.name]:event.target.value\n    })\n    \n  }\n  readURL=(event)=> {\n    let input = event.target\n            if (input.files && input.files[0]) {\n                var reader = new FileReader();\n\n                reader.onload =  (e)=> {\n                  this.setState({url:e.target.result, ...INITIAL})\n                };\n\n                reader.readAsDataURL(input.files[0]);\n            }\n        }\n  render() {\n    return (\n      <>\n      <div className=\"Navbar\">\n        <div className=\"flex-1\">CSS Filter Demo with react and Styled components</div>\n        \n          <div>\n          <label htmlFor=\"imageUpload\" className=\"uploadBtn\">Try your image</label>\n          <input type='file' onChange={this.readURL} id=\"imageUpload\"/>\n        </div>\n      </div>\n      <div className=\"img-bg\"><Image id=\"blah\" className=\"responsive\"\n       blur={this.state.blur}\n       greyscale={this.state.greyscale}\n       brightness={this.state.brightness}\n       contrast={this.state.contrast} \n       hue={this.state.hue} \n       opacity={this.state.opacity} \n       saturate={this.state.saturate}\n       sepia={this.state.sepia} \n       src={this.state.url} alt=\"your image\" /></div>\n        \n      <Container>\n       <div className=\"width100\">\n       <h2 className=\"textcolor padding15 heading\">Customize Your Image</h2>\n        <Slider name=\"blur\" value={this.state.blur} min=\"0\" max=\"10\" callback={()=>this.changeValue}/>\n        <Slider name=\"greyscale\" value={this.state.greyscale} min=\"0\" max=\"10\" callback={()=>this.changeValue}/>\n        <Slider name=\"brightness\" value={this.state.brightness} min=\"0\" max=\"3\" step=\"0.1\" callback={()=>this.changeValue}/>\n        <Slider name=\"contrast\" value={this.state.contrast} min=\"1\" max=\"10\" callback={()=>this.changeValue} />\n        <Slider name=\"hue\" value={this.state.hue} min=\"1\" max=\"100\" callback={()=>this.changeValue}/>\n        <Slider name=\"opacity\" value={this.state.opacity} min=\"0\" max=\"1\" callback={()=>this.changeValue} step=\"0.1\"/>\n        <Slider name=\"saturate\" value={this.state.saturate} min=\"1\" max=\"10\" callback={()=>this.changeValue}/>\n        <Slider name=\"sepia\" value={this.state.sepia} min=\"0\" max=\"10\" callback={()=>this.changeValue}/>\n       </div>\n      \n      </Container>\n      </>\n    );\n  }\n}\nexport const Slider=(props)=>{\n  return (\n      <div className=\"slidecontainer\">\n        <div className=\"filterStyle\">{props.name}:</div> \n        <div className=\"flex-1\"><input type=\"range\" min={props.min} max={props.max} value={props.value} step={props.step || 1} className=\"slider\" name={props.name} id={props.name} onChange={props.callback()}/></div>\n      </div>\n  )\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}